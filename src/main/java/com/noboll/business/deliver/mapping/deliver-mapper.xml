<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 

    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace和定义的Mapper接口对应，并实现其中的方法 -->

<mapper namespace="com.noboll.business.deliver.dao.DeliverDao">

	<!-- id和mapper接口中的方法名对应，resultType使用mybatis.xml中的别名 -->	
	<select id="getEntity" parameterType="string"
		resultType="com.noboll.business.deliver.entity.Deliver" resultMap="deliver.result">
        <![CDATA[
           	select p.*,r.name resumeName,c.name customerName,po.name positionName,req.name requirementName,d1.name addressName,
				rd1.name degreeName,rd2.name yearsName,c.id customerId,rd3.name interviewStatusName,rd4.name statusName
		 	from 
			 	deliver p
		 	left join resume r on r.id=p.resume_id and r.delete_flag='0'
		 	left join dict rd1 on rd1.id=r.degree and rd1.delete_flag='0'
		    left join dict rd2 on rd2.id=r.years and rd2.delete_flag='0'
		    left join dict rd3 on rd3.id=p.interview_status and rd3.delete_flag='0'
		    left join dict rd4 on rd4.id=p.status and rd4.delete_flag='0'
		 	left join requirement req on req.id = p.requirement_id and req.delete_flag='0'
		 	left join customer c on c.id = req.customer_id and req.delete_flag='0'
		 	left join position po on po.id=req.position_id and po.delete_flag='0'
		 	left join dict d1 on d1.id=req.address and d1.delete_flag='0'
			where p.delete_flag = '0' 
					and p.id = #{id} 
        ]]>
	</select>
	
	
	<update id="updateEntity" parameterType="com.noboll.business.deliver.entity.Deliver">
		update deliver 
		set
			resume_id = #{resumeId},
			requirement_id = #{requirementId},deliver_time = #{deliverTime},
			description=#{description},
			<include refid="system.user_value_update"></include>
		where id = #{id}
	</update>

	<insert id="saveEntity" parameterType="com.noboll.business.deliver.entity.Deliver">
		<selectKey keyProperty="id" resultType="String" order="BEFORE">
			<include refid="system.generatedId"></include>
		</selectKey>
		insert into deliver
		(id, resume_id, requirement_id, deliver_time,description,status,delete_flag,<include refid="system.user_column_insert"></include>)
		values
		(#{id}, #{resumeId}, #{requirementId}, #{deliverTime},#{description},#{status},'0',<include refid="system.user_value_insert"></include>)
	</insert>

	<update id="deleteEntity" parameterType="string">
		update deliver set
		delete_flag = '1'
		where id = #{id}
	</update>
	
	<select id="getList" resultType="list" parameterType="map"
		resultMap="deliver.result">
		select p.*,r.name resumeName,c.name customerName,po.name positionName,req.name requirementName,d1.name addressName,
		rd1.name degreeName,rd2.name yearsName,c.id customerId,rd3.name interviewStatusName,rd3.code interviewStatusCode
	 	from 
		 	deliver p
	 	left join resume r on r.id=p.resume_id and r.delete_flag='0'
	 	left join dict rd1 on rd1.id=r.degree and rd1.delete_flag='0'
	    left join dict rd2 on rd2.id=r.years and rd2.delete_flag='0'
	    left join dict rd3 on rd3.id=p.interview_status and rd3.delete_flag='0'
	 	left join requirement req on req.id = p.requirement_id and req.delete_flag='0'
	 	left join customer c on c.id = req.customer_id and req.delete_flag='0'
	 	left join position po on po.id=req.position_id and po.delete_flag='0'
	 	left join dict d1 on d1.id=req.address and d1.delete_flag='0'
		where p.delete_flag = '0' 
		<if test="_parameter.containsKey('resumeId')">
			and p.resume_id LIKE CONCAT('%',
			CONCAT(#{resumeId,jdbcType=VARCHAR}, '%'))
		</if>
		<if test="_parameter.containsKey('userId')">
			and r.user_id = #{userId,jdbcType=VARCHAR}
		</if>
		<if test="_parameter.containsKey('requirementId')">
			and p.requirement_id =#{requirementId,jdbcType=VARCHAR}
		</if>
		<if test="_parameter.containsKey('customerId')">
			and req.customer_id =#{customerId,jdbcType=VARCHAR}
		</if>
		<if test="_parameter.containsKey('customerName')">
			and c.name LIKE CONCAT('%',
			CONCAT(#{customerName,jdbcType=VARCHAR}, '%'))
		</if>
		<if test="_parameter.containsKey('positionName')">
			and po.name LIKE CONCAT('%',
			CONCAT(#{positionName,jdbcType=VARCHAR}, '%'))
		</if>
		<if test="_parameter.containsKey('degreeName')">
			and rd1.id  =#{degreeName,jdbcType=VARCHAR}
		</if>
		<if test="_parameter.containsKey('yearsName')">
			and rd2.id  =#{yearsName,jdbcType=VARCHAR}
		</if>
		<if test="_parameter.containsKey('status')">
			and p.status  =#{status,jdbcType=VARCHAR}
		</if>
		<if test="_parameter.containsKey('interviewStatusName')">
			and p.interview_status  =#{interviewStatusName,jdbcType=VARCHAR}
		</if>
		order by p.deliver_time desc
	</select>
	
	<select id="getAllEntity" resultType="list"  parameterType="map" resultMap="deliver.result">
    	select p.*
	 	from 
		 	deliver p
    	where delete_flag='0'
    </select>
    
	<select id="getByRequirementAndUserId" resultType="list" resultMap="deliver.result">
		select p.*
	 	from 
		 	deliver p
	 	left join resume r on r.id=p.resume_id and r.delete_flag='0'
			where p.delete_flag='0' and r.user_id = #{userId,jdbcType=VARCHAR}
			and p.requirement_id =#{requirementId,jdbcType=VARCHAR}
	</select>
	
	<update id="updateStatus" parameterType="com.noboll.business.deliver.entity.Deliver">
		update deliver 
		set
			status = #{status},
			interview_status = #{interviewStatus},
			<include refid="system.user_value_update"></include>
		where id = #{id}
	</update>

</mapper>