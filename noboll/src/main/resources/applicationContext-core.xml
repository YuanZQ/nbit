<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:oscache="http://www.springmodules.org/schema/oscache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
   	 http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
   	 http://www.springframework.org/schema/context
   	 http://www.springframework.org/schema/context/spring-context-3.1.xsd 
   	 http://www.springframework.org/schema/aop 
   	 http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
   	 http://www.springframework.org/schema/cache  
	http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
   	 http://www.springframework.org/schema/tx 
   	 http://www.springframework.org/schema/tx/spring-tx-3.1.xsd 
   	 http://www.springmodules.org/schema/oscache 
   	 http://www.springmodules.org/schema/cache/springmodules-oscache.xsd
   	 http://www.springframework.org/schema/mvc
   	 http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">
   	 
    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:setting.properties" />  
    </bean>
    
    <!-- JedisPool -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxTotal}" />
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>

    <bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy">
        <constructor-arg name="poolConfig"  ref="jedisPoolConfig" />
        <constructor-arg name="host"  value="${redis.host}" />
        <constructor-arg name="port" value="${redis.port}" />
        <constructor-arg name="timeout" value="${redis.timeOut}" />
        <constructor-arg name="password" value="${redis.password}" />
    </bean>
    
    <bean id = "cacheService" class="${sys.cache.impl}"></bean>
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${database.driverClassName}" />
		<property name="url" value="${database.url}" />
		<property name="username" value="${database.username}" />
		<property name="password" value="${database.password}" />
		<!-- 配置初始化大小、最小、最大 -->  
	    <property name="initialSize" value="50" />  
	    <property name="minIdle" value="10" />   
	    <property name="maxActive" value="200" />  
	   
	    <!-- 配置获取连接等待超时的时间 -->  
	    <property name="maxWait" value="60000" />  
	   
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />  
	   
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
	    <property name="minEvictableIdleTimeMillis" value="300000" />  
	    
	    <property name="validationQuery" value="SELECT 'x'" />  
	    <property name="testWhileIdle" value="true" />  
	    <property name="testOnBorrow" value="false" />  
	    <property name="testOnReturn" value="false" />  
	   
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  
	    <property name="poolPreparedStatements" value="true" />  
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />  
	   
	    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->  
	    <property name="filters" value="stat" />   
	</bean>
	
	<bean id="exceptionHandler" class="com.noboll.core.exception.BusinessExceptionHandler"/> 
	
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath*:com/noboll/**/mapping/*.xml"></property>  
        <property name="plugins">
            <list>            	
                <bean
                    class="com.github.miemiedev.mybatis.paginator.OffsetLimitInterceptor">
                    <property name="dialectClass"
                        value="com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect"></property>
                </bean>
                <bean class="com.noboll.core.interceptor.MybatisInterceptor">
<!--                 	<property name="context" ref="systemContext"></property> -->
                </bean>
            </list>
        </property>
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.noboll.**.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
	  	<constructor-arg index="0" ref="sqlSessionFactory" />
	  	<!-- <constructor-arg index="1" value="BATCH" /> 如果想要进行批量操作可加入这个属性 -->
	 </bean>
	 
	 <!--  声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    
    <!-- AOP事务配置 -->
    <aop:config>
        <!-- 切点：只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.noboll..*.service..*.*(..))" />
        <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>
    
    <!-- 自动扫描组件，这里要把 controller去除，他们是在dispatcher-servlet.xml中配置扫描的   -->  
     <context:component-scan base-package="com.noboll">  
          <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />   
     </context:component-scan> 
    
    <mvc:annotation-driven>  
	    <mvc:message-converters register-defaults="true">  
	        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
	             <property name="objectMapper">  
	                 <bean class="com.github.miemiedev.mybatis.paginator.jackson2.PageListJsonMapper"/>  
	             </property>  
	         </bean>  
	     </mvc:message-converters>  
	 </mvc:annotation-driven> 

	<mvc:interceptors >
	     <bean class ="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
	     <bean class="com.noboll.intercept.CustomerInterceptor">
	     	<property name="ignoreList">
	     		<list>
	     			<value>login</value>
	     			<value>toLogin</value>
	     			<value>logout</value>
	     			<value>getProgress</value>
	     			<value>queryAllDict</value>
	     		</list>
	     	</property>
	     </bean>
	</mvc:interceptors > 
</beans>