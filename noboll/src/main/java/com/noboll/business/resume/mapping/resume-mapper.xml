<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 

    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace和定义的Mapper接口对应，并实现其中的方法 -->

<mapper namespace="com.noboll.business.resume.dao.ResumeDao">

	<!-- id和mapper接口中的方法名对应，resultType使用mybatis.xml中的别名 -->	
	<select id="getEntity" parameterType="string"
		resultType="com.noboll.business.resume.entity.Resume" resultMap="resume.result">
        <![CDATA[
           	select p.*,d1.name sexName,d3.name degreeName,d4.name payName,d5.name nativeName,d6.name yearsName,
           	po.positionIds,po.positionNames,inte.intentionIds,inte.intentionNames
			from 
			 	resume p
		 	left join dict d1 on d1.id=p.sex
	   		left join dict d3 on d3.id=p.degree
		    left join dict d4 on d4.id=p.pay
		    left join dict d5 on d5.id=p.native
		    left join dict d6 on d6.id=p.years
		    left join (
					select rp.resume_id,GROUP_CONCAT(rp.position_id) positionIds,GROUP_CONCAT(d7.name) positionNames
					from resume r
					left join resume_position rp on rp.resume_id = r.id
					left join position d7 on d7.id = rp.position_id
					where r.id = #{id} 
					group by r.id
				) po on po.resume_id = p.id
		    left join (
					select ri.resume_id,GROUP_CONCAT(ri.intention) intentionIds,GROUP_CONCAT(d8.name) intentionNames
					from resume r
					left join resume_intention ri on ri.resume_id = r.id
					left join dict d8 on d8.id = ri.intention
					where r.id = #{id} 
					group by r.id
				) inte on inte.resume_id = p.id
			 where 
				 p.id = #{id} 
        ]]>
	</select>
	
	
	<update id="updateEntity" parameterType="com.noboll.business.resume.entity.Resume">
		update resume 
		set
			name = #{name},
			years = #{years},
			join_time = #{joinTime},
			school = #{school},
			finish_time = #{finishTime},
			user_id = #{userId},
			degree = #{degree},
			school = #{school},
			sex = #{sex},mobile = #{mobile},
			address = #{address},birthday = #{birthday},
			contact = #{contact},contact_mobile = #{contactMobile},
			pay = #{pay},native = #{native_},
			description=#{description},
			<include refid="system.user_value_update"></include>
		where id = #{id}
	</update>

	<insert id="saveEntity" parameterType="com.noboll.business.resume.entity.Resume">
		<selectKey keyProperty="id" resultType="String" order="BEFORE">
			<include refid="system.generatedId"></include>
		</selectKey>
		insert into resume
		(id, name, sex, mobile,school, address,description,years,join_time,finish_time,user_id,
			degree,contact,contact_mobile,pay,native,
			delete_flag,birthday,<include refid="system.user_column_insert"></include>)
		values
		(#{id}, #{name}, #{sex}, #{mobile},#{school}, #{address},#{description},#{years},#{joinTime},#{finishTime},#{userId},
			#{degree}, #{contact}, #{contactMobile}, #{pay}, #{native_},
		'0',#{birthday},<include refid="system.user_value_insert"></include>)
	</insert>

	<update id="deleteEntity" parameterType="string">
		update resume set
		delete_flag = '1'
		where id = #{id}
	</update>
	
	<select id="getList" resultType="list" parameterType="map"
		resultMap="resume.result">
		select p.*,d1.name sexName,d3.name degreeName,d4.name payName,d5.name nativeName,d6.name yearsName
			 from 
			 	resume p
			 left join dict d1 on d1.id=p.sex
			   left join dict d3 on d3.id=p.degree
			    left join dict d4 on d4.id=p.pay
			    left join dict d5 on d5.id=p.native
			    left join dict d6 on d6.id=p.years
		where p.delete_flag = '0' 
		<if test="_parameter.containsKey('name')">
			and p.name LIKE CONCAT('%',
			CONCAT(#{name,jdbcType=VARCHAR}, '%'))
		</if>
		<if test="_parameter.containsKey('degreeName')">
			and p.degree =#{degreeName,jdbcType=VARCHAR}
		</if>
		<if test="_parameter.containsKey('mobile')">
			and p.mobile =#{mobile,jdbcType=VARCHAR}
		</if>
		<if test="_parameter.containsKey('sexName')">
			and p.sex=#{sexName} 
		</if>
		<if test="_parameter.containsKey('userId')">
			and p.user_id=#{userId} 
		</if>
		<if test="_parameter.containsKey('yearsName')">
			and d6.id = #{yearsName,jdbcType=VARCHAR}
		</if>
		order by p.last_modify_time,p.create_time desc
	</select>
	
	<select id="getAllEntity" resultType="list"  parameterType="map" resultMap="resume.result">
    	select p.*,d1.name sexName,d3.name degreeName,d4.name payName,d5.name nativeName,d6.name yearsName
			 from 
			 	resume p
			 left join dict d1 on d1.id=p.sex
			   left join dict d3 on d3.id=p.degree
			    left join dict d4 on d4.id=p.pay
			    left join dict d5 on d5.id=p.native
			    left join dict d6 on d6.id=p.years
    	where p.delete_flag=0
    </select>
    
    
    <select id="getSearchList" resultType="list" parameterType="map"
		resultMap="resume.result">
		select p.*,d1.name sexName,d3.name degreeName,d4.name payName,d5.name nativeName,d6.name yearsName,
		po.positionIds,po.positionNames,inte.intentionIds,inte.intentionNames
			 from 
			 	resume p
			 left join dict d1 on d1.id=p.sex
			   left join dict d3 on d3.id=p.degree
			    left join dict d4 on d4.id=p.pay
			    left join dict d5 on d5.id=p.native
			    left join dict d6 on d6.id=p.years
			    left join (
					select rp.resume_id,GROUP_CONCAT(rp.position_id) positionIds,GROUP_CONCAT(d7.name) positionNames
					from resume r
					left join resume_position rp on rp.resume_id = r.id
					left join position d7 on d7.id = rp.position_id
					group by r.id
				) po on po.resume_id = p.id
		    	left join (
					select ri.resume_id,GROUP_CONCAT(ri.intention) intentionIds,GROUP_CONCAT(d8.name) intentionNames
					from resume r
					left join resume_intention ri on ri.resume_id = r.id
					left join dict d8 on d8.id = ri.intention
					group by r.id
				) inte on inte.resume_id = p.id
		where p.delete_flag = '0' 
		<if test="_parameter.containsKey('name')">
			and p.name LIKE CONCAT('%',
			CONCAT(#{name,jdbcType=VARCHAR}, '%'))
		</if>
		<if test="_parameter.containsKey('degreeName')">
			and p.degree =#{degreeName,jdbcType=VARCHAR}
		</if>
		<if test="_parameter.containsKey('mobile')">
			and p.mobile =#{mobile,jdbcType=VARCHAR}
		</if>
		<if test="_parameter.containsKey('sexName')">
			and p.sex=#{sexName} 
		</if>
		<if test="_parameter.containsKey('userId')">
			and p.user_id=#{userId} 
		</if>
		<if test="_parameter.containsKey('intentionName')">
			and inte.intentionIds LIKE CONCAT('%',
			CONCAT(#{intentionName,jdbcType=VARCHAR}, '%'))
		</if>
		<if test="_parameter.containsKey('work_life')">
			and d6.id = #{work_life,jdbcType=VARCHAR}
		</if>
		<if test="_parameter.containsKey('pyName')">
			and (po.positionNames LIKE CONCAT('%',
			CONCAT(#{pyName,jdbcType=VARCHAR}, '%'))
			OR
			p.name LIKE CONCAT('%',
			CONCAT(#{pyName,jdbcType=VARCHAR}, '%'))
			)
		</if>
		<if test="_parameter.containsKey('degree')">
			and p.degree = #{degree,jdbcType=VARCHAR}
		</if>
		<if test="_parameter.containsKey('pay')">
			and p.pay = #{pay,jdbcType=VARCHAR}
		</if>
		<if test="_parameter.containsKey('position_type')">
			and exists 
			(select 1 from resume_position rp left join position po on po.id = rp.position_id 
				where rp.resume_id = p.id and po.type = #{position_type,jdbcType=VARCHAR})
		</if>
		<if test="_parameter.containsKey('position')">
			and exists 
			(select 1 from resume_position rp left join position po on po.id = rp.position_id 
				where rp.resume_id = p.id and rp.position_id = #{position,jdbcType=VARCHAR})
		</if>
		order by p.last_modify_time,p.create_time desc
	</select>

</mapper>